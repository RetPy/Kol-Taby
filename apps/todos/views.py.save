
from rest_framework import viewsets
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework.decorators import api_view
from rest_framework.pagination import LimitOffsetPagination
from rest_framework.response import Response

from apps.todos.models import Todo
from apps.todos.serializers import TodoSerializer

from utils.permissions import IsAdmin, IsAuthenticated, IsOwner


class TodoViewSet(viewsets.ModelViewSet):
    queryset = Todo.objects.all()
    serializer_class = TodoSerializer
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['employee', 'created_date', 'deadline', 'status']
    permission_classes_by_action = {
        'list': [IsAuthenticated],
        'create': [IsAdmin],
        'retrieve': [IsAdmin | IsOwner],
        'update': [IsAdmin | IsOwner],
        'delete': [IsAdmin],
    }

    def get_permissions(self):
        try:
            return [permission() for permission in self.permission_classes_by_action[self.action]]
        except KeyError:
            return [permission() for permission in self.permission_classes]


@api_view(['GET'])
def get_user_todos(request, pk):
    paginator = LimitOffsetPagination()
    paginator.page_size = 1000000
    try:
        todos_1 = Todo.objects.filter(employee=pk, status='1')
        todos_2 = Todo.objects.filter(employee=pk, status='2')
        todos = []
        todos.extend(todos_1)
        todos.extend(todos_2)
        result = paginator.paginate_queryset(todos, request)
        serializer = TodoSerializer(result, many=True)
        return paginator.get_paginated_response(serializer.data)
    except:
        return paginator.get_paginated_response([])


@api_view(['GET'])
def get_user_last_todos(request, pk):
    paginator = LimitOffsetPagination()
    paginator.page_size = 1000000
    try:
        todos_without_1 = Todo.objects.filter(employee=pk, status='1').order_by('-id')[:5]
        todos_without_2 = Todo.objects.filter(employee=pk, status='2').order_by('-id')[:5]
        sudo dnf install google-chrome-stable
        result = paginator.paginate_queryset(last_five_todos, request)
        serializer = TodoSerializer(result, many=True)
        return paginator.get_paginated_response(serializer.data)
    except:
        return paginator.get_paginated_response([])
